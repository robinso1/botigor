import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiohttp import web
from bot.core.config import settings
from bot.core.database import get_session_maker
from bot.handlers import base, settings as settings_handler, subscription, admin, webhook
from bot.services.scheduler import SchedulerService
from bot.middlewares.database import DatabaseMiddleware
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('bot.log')
    ]
)
logger = logging.getLogger(__name__)

async def on_startup(bot: Bot, app: web.Application) -> None:
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –¥–ª—è –±–æ—Ç–∞
        if settings.WEBHOOK_URL:
            await bot.set_webhook(
                url=settings.WEBHOOK_URL,
                drop_pending_updates=True
            )
            logger.info(f"Webhook set to {settings.WEBHOOK_URL}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler = SchedulerService(app["session_maker"], bot)
        scheduler.start()
        app["scheduler"] = scheduler
        logger.info("Scheduler started")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ
        for admin_id in settings.ADMIN_IDS:
            try:
                await bot.send_message(
                    admin_id,
                    "üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
                )
            except Exception as e:
                logger.error(f"Failed to notify admin {admin_id}: {str(e)}")
                
    except Exception as e:
        logger.error(f"Error in startup: {str(e)}", exc_info=True)
        raise

async def on_shutdown(bot: Bot, app: web.Application) -> None:
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞."""
    try:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        if "scheduler" in app:
            app["scheduler"].stop()
            logger.info("Scheduler stopped")
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –≤–µ–±—Ö—É–∫
        await bot.delete_webhook()
        logger.info("Webhook removed")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        await app["session_maker"]().close()
        logger.info("Database sessions closed")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        for admin_id in settings.ADMIN_IDS:
            try:
                await bot.send_message(
                    admin_id,
                    "üîÑ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è."
                )
            except Exception as e:
                logger.error(f"Failed to notify admin {admin_id}: {str(e)}")
                
    except Exception as e:
        logger.error(f"Error in shutdown: {str(e)}", exc_info=True)

async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        bot = Bot(token=settings.BOT_TOKEN)
        dp = Dispatcher(storage=MemoryStorage())
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = web.Application()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        session_maker = get_session_maker()
        app["session_maker"] = session_maker
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware
        dp.message.middleware(DatabaseMiddleware())
        dp.callback_query.middleware(DatabaseMiddleware())
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
        dp.include_router(base.router)
        dp.include_router(settings_handler.router)
        dp.include_router(subscription.router)
        dp.include_router(admin.router)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤
        if settings.WEBHOOK_URL:
            webhook.setup_webhook_routes(app)
            app["bot"] = bot
            app["dp"] = dp
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            app.on_startup.append(lambda app: on_startup(bot, app))
            app.on_shutdown.append(lambda app: on_shutdown(bot, app))
            
            # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
            runner = web.AppRunner(app)
            await runner.setup()
            site = web.TCPSite(
                runner,
                settings.WEB_SERVER_HOST,
                settings.WEB_SERVER_PORT
            )
            await site.start()
            logger.info(f"Web server started at {settings.WEB_SERVER_HOST}:{settings.WEB_SERVER_PORT}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
            await asyncio.Event().wait()
            
        else:
            # –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ long polling
            await on_startup(bot, app)
            await dp.start_polling(bot)
            
    except Exception as e:
        logger.error(f"Error in main: {str(e)}", exc_info=True)
        raise
    finally:
        await on_shutdown(bot, app)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped")
    except Exception as e:
        logger.error(f"Fatal error: {str(e)}", exc_info=True) 