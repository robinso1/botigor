from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from bot.models.user import User
from bot.services.subscription import SubscriptionService
from bot.services.payment import PaymentService
from aiogram.utils.keyboard import InlineKeyboardBuilder
import json
import logging

router = Router()
logger = logging.getLogger(__name__)

class SubscriptionStates(StatesGroup):
    selecting_plan = State()
    confirming_payment = State()

def get_subscription_keyboard() -> types.InlineKeyboardMarkup:
    """Create subscription keyboard markup."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üí≥ –¢–∞—Ä–∏—Ñ—ã", callback_data="subscription:plans")
    builder.button(text="üìä –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data="subscription:status")
    builder.adjust(1)
    return builder.as_markup()

def get_plans_keyboard() -> types.InlineKeyboardMarkup:
    """Create plans keyboard markup."""
    builder = InlineKeyboardBuilder()
    
    for plan_id, plan in settings.SUBSCRIPTION_PLANS.items():
        builder.button(
            text=f"{plan['name']} - {plan['price']}‚ÇΩ",
            callback_data=f"plan:{plan_id}"
        )
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="subscription:back")
    builder.adjust(1)
    return builder.as_markup()

@router.message(F.text == "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞")
async def handle_subscription(message: types.Message, session: AsyncSession):
    """Handle subscription button."""
    query = select(User).where(User.telegram_id == message.from_user.id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()
    
    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    
    subscription_service = SubscriptionService(session)
    subscription = await subscription_service.get_user_subscription(user.id)
    
    if subscription:
        await message.answer(
            f"üìä –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞:\n\n"
            f"–¢–∞—Ä–∏—Ñ: {subscription.plan_name}\n"
            f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription.expires_at.strftime('%d.%m.%Y')}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_subscription_keyboard()
        )
    else:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã:",
            reply_markup=get_plans_keyboard()
        )

@router.callback_query(lambda c: c.data == "subscription:plans")
async def handle_plans(callback: types.CallbackQuery):
    """Handle plans button."""
    plans_text = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:\n\n"
    
    for plan in settings.SUBSCRIPTION_PLANS.values():
        plans_text += (
            f"üî∏ {plan['name']} - {plan['price']}‚ÇΩ\n"
            f"{plan['description']}\n\n"
        )
    
    await callback.message.edit_text(
        plans_text,
        reply_markup=get_plans_keyboard()
    )

@router.callback_query(lambda c: c.data == "subscription:status")
async def handle_status(callback: types.CallbackQuery, session: AsyncSession):
    """Handle subscription status button."""
    query = select(User).where(User.telegram_id == callback.from_user.id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()
    
    subscription_service = SubscriptionService(session)
    subscription = await subscription_service.get_user_subscription(user.id)
    
    if subscription:
        plan = settings.SUBSCRIPTION_PLANS[subscription.plan_name]
        status_text = (
            f"üìä –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞\n\n"
            f"–¢–∞—Ä–∏—Ñ: {plan['name']}\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {subscription.price}‚ÇΩ\n"
            f"–ù–∞—á–∞–ª–æ: {subscription.starts_at.strftime('%d.%m.%Y')}\n"
            f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription.expires_at.strftime('%d.%m.%Y')}\n\n"
            f"{plan['description']}"
        )
    else:
        status_text = (
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã:"
        )
    
    await callback.message.edit_text(
        status_text,
        reply_markup=get_plans_keyboard()
    )

@router.callback_query(lambda c: c.data.startswith("plan:"))
async def handle_plan_selection(callback: types.CallbackQuery, session: AsyncSession, state: FSMContext):
    """Handle plan selection."""
    try:
        plan_id = callback.data.split(":")[1]
        plan = settings.SUBSCRIPTION_PLANS[plan_id]
        
        query = select(User).where(User.telegram_id == callback.from_user.id)
        result = await session.execute(query)
        user = result.scalar_one_or_none()
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        payment_service = PaymentService(session)
        payment = await payment_service.create_payment(
            user_id=user.id,
            plan_name=plan_id,
            return_url=f"https://t.me/{callback.bot.username}?start=payment_{payment['payment_id']}"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(payment_id=payment["payment_id"])
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
        builder = InlineKeyboardBuilder()
        builder.button(
            text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å",
            url=payment["confirmation_url"]
        )
        builder.button(
            text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
            callback_data=f"check_payment:{payment['payment_id']}"
        )
        builder.button(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
            callback_data=f"cancel_payment:{payment['payment_id']}"
        )
        builder.adjust(1)
        
        await callback.message.edit_text(
            f"üí≥ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
            f"–¢–∞—Ä–∏—Ñ: {plan['name']}\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {plan['price']}‚ÇΩ\n\n"
            f"{plan['description']}\n\n"
            "–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å' –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'.",
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error creating payment: {str(e)}", exc_info=True)
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_subscription_keyboard()
        )

@router.callback_query(lambda c: c.data.startswith("check_payment:"))
async def handle_check_payment(callback: types.CallbackQuery, session: AsyncSession):
    """Handle payment check button."""
    try:
        payment_id = callback.data.split(":")[1]
        payment_service = PaymentService(session)
        payment_status = await payment_service.get_payment_status(payment_id)
        
        if not payment_status:
            await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        if payment_status["status"] == "succeeded":
            await callback.message.edit_text(
                "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
                "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.",
                reply_markup=get_subscription_keyboard()
            )
        elif payment_status["status"] == "canceled":
            await callback.message.edit_text(
                "‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏:",
                reply_markup=get_plans_keyboard()
            )
        else:
            await callback.answer(
                "‚è≥ –ü–ª–∞—Ç–µ–∂ –≤—Å–µ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ.",
                show_alert=True
            )
            
    except Exception as e:
        logger.error(f"Error checking payment: {str(e)}", exc_info=True)
        await callback.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )

@router.callback_query(lambda c: c.data.startswith("cancel_payment:"))
async def handle_cancel_payment(callback: types.CallbackQuery, session: AsyncSession):
    """Handle payment cancellation button."""
    try:
        payment_id = callback.data.split(":")[1]
        payment_service = PaymentService(session)
        
        if await payment_service.cancel_payment(payment_id):
            await callback.message.edit_text(
                "‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏:",
                reply_markup=get_plans_keyboard()
            )
        else:
            await callback.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂.\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω.",
                show_alert=True
            )
            
    except Exception as e:
        logger.error(f"Error canceling payment: {str(e)}", exc_info=True)
        await callback.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )

@router.callback_query(lambda c: c.data == "subscription:back")
async def handle_subscription_back(callback: types.CallbackQuery):
    """Handle back button in subscription menu."""
    await callback.message.edit_text(
        "üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_subscription_keyboard()
    ) 