from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import AsyncSession
from bot.core.config import settings
from bot.models.user import User
from bot.models.lead import Lead, LeadDistribution
from bot.models.settings import BotSettings
from datetime import datetime, timedelta
from aiogram.utils.keyboard import InlineKeyboardBuilder
import json

router = Router()

class AdminSettingsStates(StatesGroup):
    editing_setting = State()

def is_admin(user_id: int) -> bool:
    """Check if user is admin."""
    return user_id in settings.admin_ids_list

def get_admin_keyboard() -> types.InlineKeyboardMarkup:
    """Create admin keyboard markup."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:stats")
    builder.button(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin:users")
    builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin:settings")
    builder.adjust(1)
    return builder.as_markup()

def get_settings_keyboard() -> types.InlineKeyboardMarkup:
    """Create settings keyboard markup."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="settings:categories")
    builder.button(text="üè¢ –ì–æ—Ä–æ–¥–∞", callback_data="settings:cities")
    builder.button(text="‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª", callback_data="settings:interval")
    builder.button(text="üë• –ú–∞–∫—Å. –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π", callback_data="settings:max_recipients")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin:back")
    builder.adjust(1)
    return builder.as_markup()

@router.message(F.text == "üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def handle_admin(message: types.Message):
    """Handle admin panel button."""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    await message.answer(
        "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )

@router.callback_query(lambda c: c.data == "admin:stats")
async def handle_admin_stats(callback: types.CallbackQuery, session: AsyncSession):
    """Handle admin stats button."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –∏ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
    now = datetime.utcnow()
    day_ago = now - timedelta(days=1)
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    total_users = await session.scalar(select(func.count(User.id)))
    active_users = await session.scalar(select(func.count(User.id)).where(User.is_active == True))
    paid_users = await session.scalar(select(func.count(User.id)).where(User.is_paid == True))
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞—è–≤–∫–∞–º
    total_leads = await session.scalar(select(func.count(Lead.id)))
    today_leads = await session.scalar(
        select(func.count(Lead.id))
        .where(Lead.created_at >= day_ago)
    )
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è–º
    total_distributions = await session.scalar(select(func.count(LeadDistribution.id)))
    today_distributions = await session.scalar(
        select(func.count(LeadDistribution.id))
        .where(LeadDistribution.sent_at >= day_ago)
    )
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    category_stats = await session.execute(
        select(Lead.category, func.count(Lead.id))
        .group_by(Lead.category)
    )
    category_stats = category_stats.all()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º
    city_stats = await session.execute(
        select(Lead.city, func.count(Lead.id))
        .group_by(Lead.city)
    )
    city_stats = city_stats.all()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_text = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
        f"- –í—Å–µ–≥–æ: {total_users}\n"
        f"- –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}\n"
        f"- –° –æ–ø–ª–∞—Ç–æ–π: {paid_users}\n\n"
        f"üìù –ó–∞—è–≤–∫–∏:\n"
        f"- –í—Å–µ–≥–æ: {total_leads}\n"
        f"- –ó–∞ 24 —á–∞—Å–∞: {today_leads}\n"
        f"- –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π: {total_distributions}\n"
        f"- –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –∑–∞ 24—á: {today_distributions}\n\n"
        f"üìã –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
    )
    
    for category, count in category_stats:
        stats_text += f"- {category}: {count}\n"
    
    stats_text += "\nüè¢ –ü–æ –≥–æ—Ä–æ–¥–∞–º:\n"
    for city, count in city_stats:
        stats_text += f"- {city}: {count}\n"
    
    await callback.message.edit_text(
        stats_text,
        reply_markup=get_admin_keyboard()
    )

@router.callback_query(lambda c: c.data == "admin:users")
async def handle_admin_users(callback: types.CallbackQuery, session: AsyncSession):
    """Handle admin users button."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    # Get all users with their leads count
    users = await session.execute(
        select(User, func.count(LeadDistribution.id))
        .outerjoin(LeadDistribution)
        .group_by(User.id)
    )
    users = users.all()
    
    if not users:
        await callback.message.edit_text(
            "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.",
            reply_markup=get_admin_keyboard()
        )
        return
    
    users_text = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for user, leads_count in users:
        status = "‚úÖ –∞–∫—Ç–∏–≤–µ–Ω" if user.is_active else "‚ùå –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
        users_text += (
            f"ID: {user.telegram_id}\n"
            f"–ò–º—è: {user.full_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"Username: {user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(user.categories) if user.categories else '–Ω–µ –≤—ã–±—Ä–∞–Ω—ã'}\n"
            f"–ì–æ—Ä–æ–¥–∞: {', '.join(user.cities) if user.cities else '–Ω–µ –≤—ã–±—Ä–∞–Ω—ã'}\n"
            f"–ü–æ–ª—É—á–µ–Ω–æ –∑–∞—è–≤–æ–∫: {leads_count}\n"
            "-------------------\n"
        )
    
    # Split message if it's too long
    if len(users_text) > 4096:
        parts = [users_text[i:i+4096] for i in range(0, len(users_text), 4096)]
        for i, part in enumerate(parts):
            if i == 0:
                await callback.message.edit_text(
                    part,
                    reply_markup=get_admin_keyboard()
                )
            else:
                await callback.message.answer(part)
    else:
        await callback.message.edit_text(
            users_text,
            reply_markup=get_admin_keyboard()
        )

@router.callback_query(lambda c: c.data == "admin:settings")
async def handle_admin_settings(callback: types.CallbackQuery, session: AsyncSession):
    """Handle admin settings button."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã
    settings_text = (
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:\n\n"
        f"üìä –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {settings.DISTRIBUTION_INTERVAL} —á–∞—Å–∞\n"
        f"üë• –ú–∞–∫—Å–∏–º—É–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {settings.MAX_RECIPIENTS}\n\n"
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n" + "\n".join(f"- {cat}" for cat in settings.CATEGORIES) + "\n\n"
        "üè¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:\n" + "\n".join(f"- {city}" for city in settings.CITIES) + "\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    )
    
    await callback.message.edit_text(
        settings_text,
        reply_markup=get_settings_keyboard()
    )

@router.callback_query(lambda c: c.data.startswith("settings:"))
async def handle_setting_selection(callback: types.CallbackQuery, state: FSMContext):
    """Handle setting selection."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    setting = callback.data.split(":")[1]
    
    if setting == "interval":
        await state.set_state(AdminSettingsStates.editing_setting)
        await state.update_data(setting="DISTRIBUTION_INTERVAL")
        await callback.message.edit_text(
            "‚è± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è (–≤ —á–∞—Å–∞—Ö):",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin:settings")
            ]])
        )
    elif setting == "max_recipients":
        await state.set_state(AdminSettingsStates.editing_setting)
        await state.update_data(setting="MAX_RECIPIENTS")
        await callback.message.edit_text(
            "üë• –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –æ–¥–Ω–æ–π –∑–∞—è–≤–∫–∏:",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin:settings")
            ]])
        )
    elif setting == "categories":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        categories_text = (
            "üìã –¢–µ–∫—É—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n" +
            "\n".join(f"- {cat}" for cat in settings.CATEGORIES) +
            "\n\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ."
        )
        await state.set_state(AdminSettingsStates.editing_setting)
        await state.update_data(setting="CATEGORIES")
        await callback.message.edit_text(
            categories_text,
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin:settings")
            ]])
        )
    elif setting == "cities":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≥–æ—Ä–æ–¥–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        cities_text = (
            "üè¢ –¢–µ–∫—É—â–∏–µ –≥–æ—Ä–æ–¥–∞:\n\n" +
            "\n".join(f"- {city}" for city in settings.CITIES) +
            "\n\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ."
        )
        await state.set_state(AdminSettingsStates.editing_setting)
        await state.update_data(setting="CITIES")
        await callback.message.edit_text(
            cities_text,
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin:settings")
            ]])
        )

@router.message(AdminSettingsStates.editing_setting)
async def process_setting_edit(message: types.Message, state: FSMContext, session: AsyncSession):
    """Process setting edit."""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    data = await state.get_data()
    setting_key = data.get("setting")
    
    if not setting_key:
        await state.clear()
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
        return
    
    try:
        if setting_key in ["DISTRIBUTION_INTERVAL", "MAX_RECIPIENTS"]:
            value = int(message.text)
            if value <= 0:
                raise ValueError("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
        elif setting_key in ["CATEGORIES", "CITIES"]:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
            query = select(BotSettings).where(BotSettings.key == setting_key)
            result = await session.execute(query)
            setting = result.scalar_one_or_none()
            
            if setting:
                current_list = setting.value
            else:
                current_list = getattr(settings, setting_key, [])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if message.text not in current_list:
                current_list.append(message.text)
            value = current_list
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –±–∞–∑–µ
        query = select(BotSettings).where(BotSettings.key == setting_key)
        result = await session.execute(query)
        setting = result.scalar_one_or_none()
        
        if setting:
            setting.value = value
        else:
            setting = BotSettings(
                key=setting_key,
                value=value,
                description=f"Setting for {setting_key}"
            )
            session.add(setting)
        
        await session.commit()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ settings
        setattr(settings, setting_key, value)
        
        await message.answer(
            f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {setting_key} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
            reply_markup=get_admin_keyboard()
        )
        await state.clear()
        
    except ValueError as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω—É.",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin:settings")
            ]])
        )

@router.callback_query(lambda c: c.data == "admin:back")
async def handle_admin_back(callback: types.CallbackQuery):
    """Handle back button in admin panel."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    ) 