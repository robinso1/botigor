from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from bot.models.user import User
from bot.core.config import settings
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot.services.distribution import DistributionService
from bot.services.demo_data import is_working_hours
import logging

router = Router()
logger = logging.getLogger(__name__)

class SettingsStates(StatesGroup):
    selecting_categories = State()
    selecting_cities = State()

def get_categories_keyboard(selected_categories=None):
    """Create inline keyboard with categories."""
    selected_categories = selected_categories or []
    builder = InlineKeyboardBuilder()
    
    for category in settings.CATEGORIES:
        status = "‚úÖ" if category in selected_categories else "‚¨úÔ∏è"
        builder.button(
            text=f"{status} {category}",
            callback_data=f"category:{category}"
        )
    
    builder.button(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="categories:done")
    builder.adjust(1)
    return builder.as_markup()

def get_cities_keyboard(selected_cities=None):
    """Create inline keyboard with cities."""
    selected_cities = selected_cities or []
    builder = InlineKeyboardBuilder()
    
    for city in settings.CITIES:
        status = "‚úÖ" if city in selected_cities else "‚¨úÔ∏è"
        builder.button(
            text=f"{status} {city}",
            callback_data=f"city:{city}"
        )
    
    builder.button(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="cities:done")
    builder.adjust(1)
    return builder.as_markup()

@router.message(F.text == "üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def handle_categories(message: types.Message, state: FSMContext, session: AsyncSession):
    """Handle categories button."""
    query = select(User).where(User.telegram_id == message.from_user.id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()
    
    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    
    await state.set_state(SettingsStates.selecting_categories)
    await state.update_data(selected_categories=user.categories or [])
    
    await message.answer(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫:\n"
        "‚úÖ - –≤—ã–±—Ä–∞–Ω–æ\n"
        "‚¨úÔ∏è - –Ω–µ –≤—ã–±—Ä–∞–Ω–æ\n\n"
        "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚úÖ –ì–æ—Ç–æ–≤–æ",
        reply_markup=get_categories_keyboard(user.categories)
    )

@router.message(F.text == "üè¢ –ì–æ—Ä–æ–¥–∞")
async def handle_cities(message: types.Message, state: FSMContext, session: AsyncSession):
    """Handle cities button."""
    query = select(User).where(User.telegram_id == message.from_user.id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()
    
    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    
    await state.set_state(SettingsStates.selecting_cities)
    await state.update_data(selected_cities=user.cities or [])
    
    await message.answer(
        "üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥–∞:\n"
        "‚úÖ - –≤—ã–±—Ä–∞–Ω–æ\n"
        "‚¨úÔ∏è - –Ω–µ –≤—ã–±—Ä–∞–Ω–æ\n\n"
        "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚úÖ –ì–æ—Ç–æ–≤–æ",
        reply_markup=get_cities_keyboard(user.cities)
    )

@router.callback_query(lambda c: c.data.startswith("category:"))
async def process_category_selection(callback: types.CallbackQuery, state: FSMContext):
    """Handle category selection."""
    category = callback.data.split(":")[1]
    data = await state.get_data()
    selected_categories = data.get("selected_categories", [])
    
    if category in selected_categories:
        selected_categories.remove(category)
    else:
        selected_categories.append(category)
    
    await state.update_data(selected_categories=selected_categories)
    await callback.message.edit_reply_markup(
        reply_markup=get_categories_keyboard(selected_categories)
    )

@router.callback_query(lambda c: c.data.startswith("city:"))
async def process_city_selection(callback: types.CallbackQuery, state: FSMContext):
    """Handle city selection."""
    city = callback.data.split(":")[1]
    data = await state.get_data()
    selected_cities = data.get("selected_cities", [])
    
    if city in selected_cities:
        selected_cities.remove(city)
    else:
        selected_cities.append(city)
    
    await state.update_data(selected_cities=selected_cities)
    await callback.message.edit_reply_markup(
        reply_markup=get_cities_keyboard(selected_cities)
    )

@router.callback_query(lambda c: c.data == "categories:done")
async def process_categories_done(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """Handle categories selection completion."""
    try:
        data = await state.get_data()
        selected_categories = data.get("selected_categories", [])
        
        if not selected_categories:
            await callback.answer("‚ùóÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é", show_alert=True)
            return
        
        query = select(User).where(User.telegram_id == callback.from_user.id)
        result = await session.execute(query)
        user = result.scalar_one_or_none()
        
        if user:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            old_categories = user.categories
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            user.categories = selected_categories
            await session.commit()
            await state.clear()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
            changes_text = ""
            if old_categories:
                added = set(selected_categories) - set(old_categories)
                removed = set(old_categories) - set(selected_categories)
                if added:
                    changes_text += "\n‚ûï –î–æ–±–∞–≤–ª–µ–Ω—ã: " + ", ".join(added)
                if removed:
                    changes_text += "\n‚ûñ –£–¥–∞–ª–µ–Ω—ã: " + ", ".join(removed)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            settings_text = (
                "‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!" + changes_text + "\n\n"
                "üìã –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(user.categories)}\n"
                f"–ì–æ—Ä–æ–¥–∞: {', '.join(user.cities) if user.cities else '–Ω–µ –≤—ã–±—Ä–∞–Ω—ã'}\n"
                f"–î–µ–º–æ —Ä–µ–∂–∏–º: {'–≤–∫–ª—é—á–µ–Ω' if user.is_demo else '–≤—ã–∫–ª—é—á–µ–Ω'}"
            )
            
            await callback.message.edit_text(settings_text)
            
            # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –¥–µ–º–æ-—Ä–µ–∂–∏–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if user.is_demo and is_working_hours():
                distribution_service = DistributionService(session)
                demo_lead = await distribution_service.create_demo_lead()
                if demo_lead:
                    distribution = await distribution_service.create_distribution(
                        lead_id=demo_lead.id,
                        user_id=user.id
                    )
                    if distribution:
                        lead_text = distribution_service.format_lead_for_user(demo_lead, user)
                        await callback.message.answer(
                            "üì® –ù–æ–≤–∞—è –¥–µ–º–æ-–∑–∞—è–≤–∫–∞ –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º:\n\n" + lead_text
                        )
            
    except Exception as e:
        logger.error(f"Error saving categories: {str(e)}", exc_info=True)
        await session.rollback()
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", show_alert=True)

@router.callback_query(lambda c: c.data == "cities:done")
async def process_cities_done(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """Handle cities selection completion."""
    try:
        data = await state.get_data()
        selected_cities = data.get("selected_cities", [])
        
        if not selected_cities:
            await callback.answer("‚ùóÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≥–æ—Ä–æ–¥", show_alert=True)
            return
        
        query = select(User).where(User.telegram_id == callback.from_user.id)
        result = await session.execute(query)
        user = result.scalar_one_or_none()
        
        if user:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            old_cities = user.cities
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ—Ä–æ–¥–∞
            user.cities = selected_cities
            await session.commit()
            await state.clear()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
            changes_text = ""
            if old_cities:
                added = set(selected_cities) - set(old_cities)
                removed = set(old_cities) - set(selected_cities)
                if added:
                    changes_text += "\n‚ûï –î–æ–±–∞–≤–ª–µ–Ω—ã: " + ", ".join(added)
                if removed:
                    changes_text += "\n‚ûñ –£–¥–∞–ª–µ–Ω—ã: " + ", ".join(removed)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            settings_text = (
                "‚úÖ –ì–æ—Ä–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!" + changes_text + "\n\n"
                "üìã –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(user.categories) if user.categories else '–Ω–µ –≤—ã–±—Ä–∞–Ω—ã'}\n"
                f"–ì–æ—Ä–æ–¥–∞: {', '.join(user.cities)}\n"
                f"–î–µ–º–æ —Ä–µ–∂–∏–º: {'–≤–∫–ª—é—á–µ–Ω' if user.is_demo else '–≤—ã–∫–ª—é—á–µ–Ω'}"
            )
            
            await callback.message.edit_text(settings_text)
            
            # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –¥–µ–º–æ-—Ä–µ–∂–∏–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if user.is_demo and is_working_hours():
                distribution_service = DistributionService(session)
                demo_lead = await distribution_service.create_demo_lead()
                if demo_lead:
                    distribution = await distribution_service.create_distribution(
                        lead_id=demo_lead.id,
                        user_id=user.id
                    )
                    if distribution:
                        lead_text = distribution_service.format_lead_for_user(demo_lead, user)
                        await callback.message.answer(
                            "üì® –ù–æ–≤–∞—è –¥–µ–º–æ-–∑–∞—è–≤–∫–∞ –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º:\n\n" + lead_text
                        )
            
    except Exception as e:
        logger.error(f"Error saving cities: {str(e)}", exc_info=True)
        await session.rollback()
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–æ–≤", show_alert=True)

@router.message(F.text == "üéÆ –î–µ–º–æ —Ä–µ–∂–∏–º")
async def handle_demo(message: types.Message, session: AsyncSession):
    """Handle demo mode button."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        query = select(User).where(User.telegram_id == message.from_user.id)
        result = await session.execute(query)
        user = result.scalar_one_or_none()
        
        if not user:
            await message.answer(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –≥–æ—Ä–æ–¥–æ–≤
        if not user.categories or not user.cities:
            await message.answer(
                "‚ùóÔ∏è –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≥–æ—Ä–æ–¥–∞:\n\n"
                f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(user.categories) if user.categories else '‚ùå –Ω–µ –≤—ã–±—Ä–∞–Ω—ã'}\n"
                f"üè¢ –ì–æ—Ä–æ–¥–∞: {', '.join(user.cities) if user.cities else '‚ùå –Ω–µ –≤—ã–±—Ä–∞–Ω—ã'}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –º–µ–Ω—é."
            )
            return
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º
        user.is_demo = not user.is_demo
        await session.commit()
        
        if user.is_demo:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
            if not is_working_hours():
                await message.answer(
                    "‚ÑπÔ∏è –î–µ–º–æ-—Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
                    "üïí –°–µ–π—á–∞—Å –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (9:00-21:00).\n"
                    "–í—ã –Ω–∞—á–Ω–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –¥–µ–º–æ-–∑–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.\n\n"
                    "–ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
                    f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(user.categories)}\n"
                    f"üè¢ –ì–æ—Ä–æ–¥–∞: {', '.join(user.cities)}\n"
                    "üìä –õ–∏–º–∏—Ç: 5 –∑–∞—è–≤–æ–∫ –≤ –¥–µ–Ω—å"
                )
                return
                
            # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –¥–µ–º–æ-–∑–∞—è–≤–∫—É
            distribution_service = DistributionService(session)
            demo_lead = await distribution_service.create_demo_lead()
            
            if demo_lead:
                # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ-–∑–∞—è–≤–∫–∏
                distribution = await distribution_service.create_distribution(
                    lead_id=demo_lead.id,
                    user_id=user.id
                )
                
                if distribution:
                    lead_text = distribution_service.format_lead_for_user(demo_lead, user)
                    await message.answer(
                        "‚úÖ –î–µ–º–æ-—Ä–µ–∂–∏–º —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
                        "–í–æ—Ç –≤–∞—à–∞ –ø–µ—Ä–≤–∞—è –¥–µ–º–æ-–∑–∞—è–≤–∫–∞:\n\n" + lead_text + "\n\n"
                        "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
                        "‚Ä¢ –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –¥–æ 5 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –≤ –¥–µ–Ω—å\n"
                        "‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 9:00-21:00\n"
                        "‚Ä¢ –ó–∞—è–≤–∫–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏\n"
                        "‚Ä¢ –î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞ –µ—â–µ —Ä–∞–∑"
                    )
                else:
                    await message.answer(
                        "‚úÖ –î–µ–º–æ-—Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
                        "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
                        "‚Ä¢ –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –¥–æ 5 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –≤ –¥–µ–Ω—å\n"
                        "‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 9:00-21:00\n"
                        "‚Ä¢ –ü–µ—Ä–≤–∞—è –∑–∞—è–≤–∫–∞ –ø—Ä–∏–¥–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è\n"
                        "‚Ä¢ –î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞ –µ—â–µ —Ä–∞–∑\n\n"
                        "–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
                        f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(user.categories)}\n"
                        f"üè¢ –ì–æ—Ä–æ–¥–∞: {', '.join(user.cities)}"
                    )
            else:
                await message.answer(
                    "‚úÖ –î–µ–º–æ-—Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
                    "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
                    "‚Ä¢ –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –¥–æ 5 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –≤ –¥–µ–Ω—å\n"
                    "‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 9:00-21:00\n"
                    "‚Ä¢ –ü–µ—Ä–≤–∞—è –∑–∞—è–≤–∫–∞ –ø—Ä–∏–¥–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è\n"
                    "‚Ä¢ –î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞ –µ—â–µ —Ä–∞–∑\n\n"
                    "–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
                    f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(user.categories)}\n"
                    f"üè¢ –ì–æ—Ä–æ–¥–∞: {', '.join(user.cities)}"
                )
        else:
            await message.answer(
                "‚ùå –î–µ–º–æ-—Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω\n\n"
                "‚Ä¢ –í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏\n"
                "‚Ä¢ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –≥–æ—Ä–æ–¥–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n"
                "‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Å–Ω–æ–≤–∞ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç"
            )
            
    except Exception as e:
        logger.error(f"Error in demo mode: {str(e)}", exc_info=True)
        await session.rollback()
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –¥–µ–º–æ-—Ä–µ–∂–∏–º–æ–º\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞:\n"
            "1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã–±—Ä–∞–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≥–æ—Ä–æ–¥–∞\n"
            "2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç\n"
            "3. –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
        ) 