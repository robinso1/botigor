from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, and_, func
from sqlalchemy.ext.asyncio import AsyncSession
from bot.models.user import User
from bot.models.subscription import Subscription
from bot.models.lead_distribution import LeadDistribution
from bot.core.config import settings
from bot.services.distribution import DistributionService
from bot.services.parser import LeadParser
from bot.models.lead import Lead
from datetime import datetime
import logging

router = Router()
lead_parser = LeadParser()
logger = logging.getLogger(__name__)

def get_main_keyboard(is_admin: bool = False) -> types.ReplyKeyboardMarkup:
    """Create main keyboard markup."""
    buttons = [
        [
            types.KeyboardButton(text="üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏"),
            types.KeyboardButton(text="üè¢ –ì–æ—Ä–æ–¥–∞")
        ],
        [
            types.KeyboardButton(text="üìä –ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"),
            types.KeyboardButton(text="üí≥ –ü–æ–¥–ø–∏—Å–∫–∞")
        ],
        [
            types.KeyboardButton(text="üéÆ –î–µ–º–æ —Ä–µ–∂–∏–º"),
            types.KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")
        ]
    ]
    
    if is_admin:
        buttons.append([types.KeyboardButton(text="üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")])
    
    return types.ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True
    )

@router.message(Command("start"))
async def cmd_start(message: types.Message, session: AsyncSession):
    """Handle /start command."""
    logger.info(f"Processing /start command for user {message.from_user.id}")
    
    try:
        # Check if user exists
        query = select(User).where(User.telegram_id == message.from_user.id)
        result = await session.execute(query)
        user = result.scalar_one_or_none()
        
        logger.info(f"User query result: {user}")
        is_admin = message.from_user.id in settings.ADMIN_IDS
        
        if not user:
            logger.info(f"Creating new user: {message.from_user.id}")
            # Create new user
            user = User(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                full_name=message.from_user.full_name,
                categories=[],
                cities=[],
                is_active=True,
                is_demo=False
            )
            session.add(user)
            await session.flush()
            logger.info(f"New user created: {user.telegram_id}")
            
            welcome_text = (
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫!\n\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–∞–º –Ω—É–∂–Ω–æ:\n"
                "1. –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫\n"
                "2. –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥–∞\n\n"
                "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã –Ω–∞—á–Ω–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."
            )
        else:
            logger.info(f"User already exists: {user.telegram_id}")
            welcome_text = (
                "üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!\n\n"
                "–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
                f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(user.categories) if user.categories else '–Ω–µ –≤—ã–±—Ä–∞–Ω—ã'}\n"
                f"üè¢ –ì–æ—Ä–æ–¥–∞: {', '.join(user.cities) if user.cities else '–Ω–µ –≤—ã–±—Ä–∞–Ω—ã'}\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."
            )
        
        # Always show keyboard
        keyboard = get_main_keyboard(is_admin)
        logger.info(f"Sending welcome message to user {message.from_user.id}")
        await message.answer(welcome_text, reply_markup=keyboard)
        await session.commit()
        logger.info(f"Start command completed successfully for user {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"Error in start command for user {message.from_user.id}: {str(e)}", exc_info=True)
        await session.rollback()
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        # Notify admins about the error
        for admin_id in settings.ADMIN_IDS:
            try:
                await message.bot.send_message(
                    admin_id,
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start:\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id}\n"
                    f"–û—à–∏–±–∫–∞: {str(e)}"
                )
            except Exception as notify_error:
                logger.error(f"Failed to notify admin {admin_id}: {str(notify_error)}")

@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def handle_help(message: types.Message):
    """Handle help button."""
    help_text = (
        "üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ - –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞—è–≤–æ–∫\n"
        "üè¢ –ì–æ—Ä–æ–¥–∞ - –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–æ–≤\n"
        "üìä –ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π\n"
        "üéÆ –î–µ–º–æ —Ä–µ–∂–∏–º - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏\n"
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å - —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≥–æ—Ä–æ–¥–∞\n"
        "2. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º\n"
        "3. –ü–æ–ª—É—á–∞–π—Ç–µ –∑–∞—è–≤–∫–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤\n\n"
        "üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:\n"
        "‚Ä¢ Basic - 990‚ÇΩ/–º–µ—Å (–¥–æ 30 –∑–∞—è–≤–æ–∫)\n"
        "‚Ä¢ Pro - 1990‚ÇΩ/–º–µ—Å (–¥–æ 100 –∑–∞—è–≤–æ–∫)\n"
        "‚Ä¢ Premium - 4990‚ÇΩ/–º–µ—Å (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)\n\n"
        "‚ÑπÔ∏è –î–µ–º–æ-—Ä–µ–∂–∏–º –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å —Ä–∞–±–æ—Ç–æ–π –±–æ—Ç–∞.\n\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )
    await message.answer(help_text)

@router.message(F.text == "üìä –ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
async def handle_status(message: types.Message, session: AsyncSession):
    """Handle status button."""
    query = select(User).where(User.telegram_id == message.from_user.id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()
    
    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
    query = select(Subscription).where(
        and_(
            Subscription.user_id == user.id,
            Subscription.is_active == True,
            Subscription.expires_at > datetime.utcnow()
        )
    )
    result = await session.execute(query)
    subscription = result.scalar_one_or_none()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    month_start = datetime.utcnow().replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    leads_count = await session.scalar(
        select(func.count(LeadDistribution.id)).where(
            and_(
                LeadDistribution.user_id == user.id,
                LeadDistribution.sent_at >= month_start
            )
        )
    )
    
    status_text = (
        "üìä –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
        f"üë§ ID: {user.telegram_id}\n"
        f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(user.categories) if user.categories else '–Ω–µ –≤—ã–±—Ä–∞–Ω—ã'}\n"
        f"üè¢ –ì–æ—Ä–æ–¥–∞: {', '.join(user.cities) if user.cities else '–Ω–µ –≤—ã–±—Ä–∞–Ω—ã'}\n"
        f"üì± –°—Ç–∞—Ç—É—Å: {'–∞–∫—Ç–∏–≤–µ–Ω' if user.is_active else '–Ω–µ –∞–∫—Ç–∏–≤–µ–Ω'}\n"
        f"üéÆ –î–µ–º–æ —Ä–µ–∂–∏–º: {'–≤–∫–ª—é—á–µ–Ω' if user.is_demo else '–≤—ã–∫–ª—é—á–µ–Ω'}\n\n"
    )
    
    if subscription:
        status_text += (
            "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞:\n"
            f"- –¢–∞—Ä–∏—Ñ: {subscription.plan_name}\n"
            f"- –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription.expires_at.strftime('%d.%m.%Y')}\n"
            f"- –ü–æ–ª—É—á–µ–Ω–æ –∑–∞—è–≤–æ–∫: {leads_count}\n"
        )
    else:
        status_text += (
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞."
        )
    
    await message.answer(status_text)

@router.message(F.chat.type.in_({"group", "supergroup"}))
async def handle_group_message(message: types.Message, session: AsyncSession):
    """Handle messages in groups to parse leads."""
    try:
        # Parse lead data from message
        lead_data = await lead_parser.parse_message(message)
        if not lead_data:
            logger.info(f"Message {message.message_id} in chat {message.chat.id} was not recognized as a lead")
            return

        # Create lead and distribute it
        lead = Lead(**lead_data)
        session.add(lead)
        await session.commit()
        
        # Distribute lead
        distribution_service = DistributionService(session)
        distributions = await distribution_service.distribute_lead(lead)
        
        if not distributions:
            logger.warning(f"No eligible users found for lead {lead.id}")
        else:
            logger.info(f"Lead {lead.id} distributed to {len(distributions)} users")
            
    except Exception as e:
        logger.error(f"Error processing message {message.message_id} in chat {message.chat.id}: {str(e)}")
        # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_id in settings.ADMIN_IDS:
            try:
                await message.bot.send_message(
                    admin_id,
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏:\n"
                    f"–ß–∞—Ç: {message.chat.title} ({message.chat.id})\n"
                    f"–°–æ–æ–±—â–µ–Ω–∏–µ ID: {message.message_id}\n"
                    f"–û—à–∏–±–∫–∞: {str(e)}"
                )
            except Exception as notify_error:
                logger.error(f"Failed to notify admin {admin_id}: {str(notify_error)}")

@router.message(F.chat.type == "private")
async def handle_private_message(message: types.Message):
    """Handle messages in private chat."""
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –¥—Ä—É–≥–∏–º–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏
    if message.text in [
        "üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", "üè¢ –ì–æ—Ä–æ–¥–∞", "üìä –ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
        "üéÆ –î–µ–º–æ —Ä–µ–∂–∏–º", "‚ÑπÔ∏è –ü–æ–º–æ—â—å", "üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"
    ]:
        return
        
    await message.answer(
        "üëã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:",
        reply_markup=get_main_keyboard(message.from_user.id in settings.ADMIN_IDS)
    ) 