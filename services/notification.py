from datetime import datetime, timedelta
from typing import List, Optional
from sqlalchemy import select, and_, func
from sqlalchemy.ext.asyncio import AsyncSession
from bot.models.user import User
from bot.models.subscription import Subscription
from bot.models.lead_distribution import LeadDistribution
from bot.core.config import settings
import logging

logger = logging.getLogger(__name__)

class NotificationService:
    def __init__(self, session: AsyncSession, bot):
        self.session = session
        self.bot = bot

    async def notify_subscription_expiring(self, days_before: int = 3) -> None:
        """Notify users about expiring subscriptions."""
        expiration_date = datetime.utcnow() + timedelta(days=days_before)
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç —á–µ—Ä–µ–∑ days_before –¥–Ω–µ–π
        query = select(Subscription).where(
            and_(
                Subscription.is_active == True,
                Subscription.expires_at <= expiration_date,
                Subscription.expires_at > datetime.utcnow()
            )
        ).join(User)
        
        result = await self.session.execute(query)
        subscriptions = result.scalars().all()
        
        for subscription in subscriptions:
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                message = (
                    f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ {subscription.plan_name} "
                    f"–∏—Å—Ç–µ–∫–∞–µ—Ç {subscription.expires_at.strftime('%d.%m.%Y')}.\n\n"
                    "–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É üí≥ –ü–æ–¥–ø–∏—Å–∫–∞"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await self.bot.send_message(
                    subscription.user.telegram_id,
                    message
                )
                logger.info(f"Sent expiration notification to user {subscription.user.telegram_id}")
                
            except Exception as e:
                logger.error(f"Error sending notification to user {subscription.user.telegram_id}: {str(e)}")

    async def notify_leads_limit(self, threshold: float = 0.8) -> None:
        """Notify users when they are close to their leads limit."""
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        month_start = datetime.utcnow().replace(day=1, hour=0, minute=0, second=0, microsecond=0)
        
        # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        query = select(Subscription).where(
            and_(
                Subscription.is_active == True,
                Subscription.expires_at > datetime.utcnow()
            )
        ).join(User)
        
        result = await self.session.execute(query)
        subscriptions = result.scalars().all()
        
        for subscription in subscriptions:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
                plan = settings.SUBSCRIPTION_PLANS[subscription.plan_name]
                leads_limit = plan["leads_limit"]
                
                if leads_limit == float('inf'):
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
                leads_count = await self.session.scalar(
                    select(func.count(LeadDistribution.id)).where(
                        and_(
                            LeadDistribution.user_id == subscription.user_id,
                            LeadDistribution.sent_at >= month_start
                        )
                    )
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –ø–æ—Ä–æ–≥
                if leads_count >= (leads_limit * threshold):
                    remaining = leads_limit - leads_count
                    message = (
                        f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –í—ã –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç–µ—Å—å –∫ –ª–∏–º–∏—Ç—É –∑–∞—è–≤–æ–∫.\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {leads_count} –∏–∑ {leads_limit}\n"
                        f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining} –∑–∞—è–≤–æ–∫\n\n"
                        "–î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞ "
                        "–Ω–∞ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π —Ç–∞—Ä–∏—Ñ."
                    )
                    
                    await self.bot.send_message(
                        subscription.user.telegram_id,
                        message
                    )
                    logger.info(f"Sent leads limit notification to user {subscription.user.telegram_id}")
                    
            except Exception as e:
                logger.error(f"Error checking leads limit for user {subscription.user.telegram_id}: {str(e)}")

    async def notify_new_features(self, message: str, admin_only: bool = False) -> None:
        """Send notification about new features to users."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
            query = select(User).where(User.is_active == True)
            if admin_only:
                query = query.where(User.telegram_id.in_(settings.ADMIN_IDS))
            
            result = await self.session.execute(query)
            users = result.scalars().all()
            
            for user in users:
                try:
                    await self.bot.send_message(
                        user.telegram_id,
                        message
                    )
                    logger.info(f"Sent feature notification to user {user.telegram_id}")
                    
                except Exception as e:
                    logger.error(f"Error sending feature notification to user {user.telegram_id}: {str(e)}")
                    
        except Exception as e:
            logger.error(f"Error sending feature notifications: {str(e)}")

    async def notify_payment_status(self, user_id: int, payment_id: str, status: str) -> None:
        """Send notification about payment status."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            query = select(User).where(User.id == user_id)
            result = await self.session.execute(query)
            user = result.scalar_one_or_none()
            
            if not user:
                logger.error(f"User {user_id} not found for payment notification")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            if status == "succeeded":
                message = (
                    "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
                    "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ "
                    "–ø–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∞—Ä–∏—Ñ—É."
                )
            elif status == "canceled":
                message = (
                    "‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
                    "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞, "
                    "–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π üí≥ –ü–æ–¥–ø–∏—Å–∫–∞"
                )
            elif status == "pending":
                message = (
                    "‚è≥ –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, "
                    "–∫–æ–≥–¥–∞ –ø–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω."
                )
            else:
                message = (
                    "‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å "
                    "–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
            
            await self.bot.send_message(
                user.telegram_id,
                message
            )
            logger.info(f"Sent payment notification to user {user.telegram_id}")
            
        except Exception as e:
            logger.error(f"Error sending payment notification: {str(e)}")

    async def notify_admins(self, message: str) -> None:
        """Send notification to admin users."""
        for admin_id in settings.ADMIN_IDS:
            try:
                await self.bot.send_message(
                    admin_id,
                    message
                )
                logger.info(f"Sent admin notification to {admin_id}")
                
            except Exception as e:
                logger.error(f"Error sending admin notification to {admin_id}: {str(e)}")

    async def schedule_notifications(self) -> None:
        """Schedule and send all notifications."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
            await self.notify_subscription_expiring()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∑–∞—è–≤–æ–∫
            await self.notify_leads_limit()
            
            logger.info("Scheduled notifications completed")
            
        except Exception as e:
            logger.error(f"Error in scheduled notifications: {str(e)}")
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ—à–∏–±–∫–µ
            await self.notify_admins(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n{str(e)}"
            ) 